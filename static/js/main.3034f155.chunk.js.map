{"version":3,"sources":["Components/UserTable.js","Components/UserForm.js","Components/EditUserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserTable","users","deleteUser","handleEdit","style","padding","large","map","user","key","id","name","username","color","Colors","PRIMARY","onClick","marginLeft","ALERT","UserForm","addUser","initialFormState","useState","setUser","handleInputChange","e","userChange","target","value","type","onChange","preventDefault","SUCCESS","EditUserForm","props","useEffect","currentUser","editUser","cancelEdit","App","setUsers","setCurrentUser","editing","setEditing","className","marginTop","marginBottom","u","index","findIndex","length","filtered","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3034f155.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Cell, Button, Colors } from \"react-foundation\";\r\n\r\nconst UserTable = ({ users, deleteUser, handleEdit }) => {\r\n  return (\r\n    <Cell style={{ padding: 20 }} large={6}>\r\n      <h5>User Table</h5>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Titre</th>\r\n            <th>Utilisateur</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map(user => {\r\n            return (\r\n              <tr key={user.id}>\r\n                <td>{user.name}</td>\r\n                <td>{user.username}</td>\r\n                <td>\r\n                  <Button\r\n                    color={Colors.PRIMARY}\r\n                    onClick={() => handleEdit(user)}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                  <Button\r\n                    style={{ marginLeft: 2 }}\r\n                    color={Colors.ALERT}\r\n                    onClick={() => deleteUser(user.id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import React, { useState } from \"react\";\r\nimport { Cell, Button, Colors } from \"react-foundation\";\r\n\r\nconst UserForm = ({ addUser }) => {\r\n  const initialFormState = { id: null, name: \"\", username: \"\" };\r\n  const [user, setUser] = useState(initialFormState);\r\n\r\n  const handleInputChange = e => {\r\n    let userChange = { ...user };\r\n    userChange[e.target.name] = e.target.value;\r\n    setUser(userChange);\r\n  };\r\n  return (\r\n    <Cell style={{ padding: 20 }} large={6}>\r\n      <h5>User Form</h5>\r\n      <form>\r\n        <label>Titre</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={user.name}\r\n          onChange={e => handleInputChange(e)}\r\n        />\r\n        <label>Utilisateur</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={user.username}\r\n          onChange={e => handleInputChange(e)}\r\n        />\r\n        <Button\r\n          onClick={e => {\r\n            e.preventDefault();\r\n            addUser(user);\r\n            setUser(initialFormState);\r\n          }}\r\n          color={Colors.SUCCESS}\r\n        >\r\n          Ajouter nouvel utilisateur\r\n        </Button>\r\n      </form>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Cell, Button, Colors } from \"react-foundation\";\r\n\r\nconst EditUserForm = props => {\r\n  useEffect(() => {\r\n    setUser(props.currentUser);\r\n  }, [props]);\r\n\r\n  const initialFormState = { id: null, name: \"\", username: \"\" };\r\n  const [user, setUser] = useState(props.currentUser);\r\n\r\n  const handleInputChange = e => {\r\n    let userChange = { ...user };\r\n    userChange[e.target.name] = e.target.value;\r\n    setUser(userChange);\r\n  };\r\n  return (\r\n    <Cell style={{ padding: 20 }} large={6}>\r\n      <h5>User Form</h5>\r\n      <form>\r\n        <label>Titre</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={user.name}\r\n          onChange={e => handleInputChange(e)}\r\n        />\r\n        <label>Utilisateur</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={user.username}\r\n          onChange={e => handleInputChange(e)}\r\n        />\r\n        <Button\r\n          onClick={e => {\r\n            e.preventDefault();\r\n            props.editUser(user);\r\n            setUser(initialFormState);\r\n          }}\r\n          color={Colors.SUCCESS}\r\n        >\r\n          Mettre Ã  jour cet utilisateur\r\n        </Button>\r\n        <Button\r\n          style={{ marginLeft: 2 }}\r\n          onClick={e => {\r\n            e.preventDefault();\r\n            props.cancelEdit();\r\n          }}\r\n          color={Colors.ALERT}\r\n        >\r\n          Annuler\r\n        </Button>\r\n      </form>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nexport default EditUserForm;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Grid, Cell } from \"react-foundation\";\nimport UserTable from \"./Components/UserTable\";\nimport UserForm from \"./Components/UserForm\";\nimport EditUserForm from \"./Components/EditUserForm\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"Tania\", username: \"floppydiskette\" },\n    { id: 2, name: \"Craig\", username: \"siliconeidolon\" },\n    { id: 3, name: \"Ben\", username: \"benisphere\" }\n  ];\n\n  const [users, setUsers] = useState(usersData);\n  const [currentUser, setCurrentUser] = useState({\n    id: null,\n    name: \"\",\n    username: \"\"\n  });\n  const [editing, setEditing] = useState(false);\n\n  const handleEdit = user => {\n    setEditing(true);\n    setCurrentUser(user);\n  };\n\n  const cancelEdit = () => {\n    setEditing(false);\n    setCurrentUser({ id: null, name: \"\", username: \"\" });\n  };\n\n  const editUser = u => {\n    const index = users.findIndex(user => user.id === u.id);\n    users[index].name = u.name;\n    users[index].username = u.username;\n    setUsers(users);\n    setEditing(false);\n  };\n\n  const addUser = user => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  const deleteUser = id => {\n    setEditing(false);\n    const filtered = users.filter(user => user.id !== id);\n    setUsers(filtered);\n  };\n  return (\n    <div className=\"App\">\n      <h3 style={{ marginTop: 20, marginBottom: 40 }}>\n        Crud with React Hooks + Foundation\n      </h3>\n      <Grid className=\"display\">\n        {editing ? (\n          <EditUserForm\n            editUser={editUser}\n            cancelEdit={cancelEdit}\n            currentUser={currentUser}\n          />\n        ) : (\n          <UserForm addUser={addUser} />\n        )}\n        <UserTable\n          users={users}\n          deleteUser={deleteUser}\n          handleEdit={handleEdit}\n        />\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"foundation-sites/dist/css/foundation.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}